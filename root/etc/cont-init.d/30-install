#!/usr/bin/with-contenv bash

if [ "$ARCH_VAR" == "amd64" ]; then
  ARCH_VAR=linux-x86_64
elif [ "$ARCH_VAR" == "arm64" ]; then
  ARCH_VAR=linux-aarch64
# elif [ "$ARCH_VAR" == "arm" ]; then
#   ARCH_VAR=linux-arm
fi

echo "Checking for valid arch options"
case $ARCH_VAR in
  linux-x86_64)
    echo "Proceeding with linux-x86_64 arch"
    ;;
  linux-aarch64)
    echo "Proceeding with linux-aarch64 arch"
    ;;
  # linux-arm)
  #   echo "Proceeding with linux-arm arch"
  #   ;;
  *)
    echo "Unrecognized or invalid arch selection, CANCELING INSTALL"
    echo "========== FAILURE DETECTED ========="
    echo "YOUR CONTAINER WILL NOT WORK, PLEASE ADDRESS OR OPEN AN ISSUE"
    exit 1
    ;;
esac

# Adjusting process names in supervisord for Architecture differences
[ "$ARCH_VAR" != "linux-x86_64" ] && sed -i 's;process_name = airupnp-linux-x86_64;process_name = airupnp-'"$ARCH_VAR"';' /etc/supervisord.conf
[ "$ARCH_VAR" != "linux-x86_64" ] && sed -i 's;process_name = aircast-linux-x86_64;process_name = aircast-'"$ARCH_VAR"';' /etc/supervisord.conf


# Find and download AirConnect binary
#future if statement to allowing reading and pinning a specific version
url=$(curl -s https://api.github.com/repos/philippe44/AirConnect/releases/latest | grep browser_download_url | cut -d '"' -f 4)
filename=${url##*/}
version=${filename%.*}
version=${version#*-}

#future variable for directory
path=/tmp
#future check if file already exists to skip downloading again - allows specifying a persistant location
echo "testing if ${path}/${filename} exists"
if [ ! -f /${path}/${filename} ]; then
    echo "file not found, downloading"
    mkdir -p ${path}
    # to allow saving download to path, change directory first.
    #future investigate curl version and --output-dir flag
    cd ${path}
    curl -L -o ${filename} ${url}
    cd /
    #future add check for download success
else
    echo "file exists"
fi

# test if desired binaries exist
# if not, extract and copy files to path (to persist) and to the container
# cleanup the extracted files
if [ ! -f ${path}/${version}/airupnp-${ARCH_VAR} -o ! -f ${path}/${version}/aircast-${ARCH_VAR} ]; then
    unzip ${filename} -d ${path}/${filename}/ \
    && mkdir -p ${path}/${version} \
    && mv ${path}/${filename}/airupnp-${ARCH_VAR} ${path}/${version}/airupnp-${ARCH_VAR} \
    && mv ${path}/${filename}/aircast-${ARCH_VAR} ${path}/${version}/aircast-${ARCH_VAR} \
    && mv ${path}/${filename}/airupnp-${ARCH_VAR} /bin/airupnp-${ARCH_VAR} \
    && mv ${path}/${filename}/aircast-${ARCH_VAR} /bin/aircast-${ARCH_VAR} \
    && chmod +x /bin/airupnp-$ARCH_VAR \
    && chmod +x /bin/aircast-$ARCH_VAR
    # clean up extracted files
    rm -r /${path}/${filename}/* \
    && rmdir /${path}/${filename}
fi

UPNP=$(sed '4,7!d' /etc/supervisord.conf | grep -c '^#')
CAST=$(sed '9,12!d' /etc/supervisord.conf | grep -c '^#')

# Check if VAR is empty, and assign arch / if not empty, run with command and assign arch / if kill, and hasn't run (=0) then comment out
if [ -z "$AIRUPNP_VAR" ]; then
  sed -i 's;command=/bin/airupnp-linux-x86_64 -l 1000:2000;command=/bin/airupnp-'"$ARCH_VAR"' -l 1000:2000;' /etc/supervisord.conf
elif [ "$AIRUPNP_VAR" != "kill" ]; then
  sed -i 's;command=/bin/airupnp-linux-x86_64 -l 1000:2000;command=/bin/airupnp-'"$ARCH_VAR $AIRUPNP_VAR"';' /etc/supervisord.conf
elif [ "$AIRUPNP_VAR" = "kill" ] && [ "$UPNP" = 0 ]; then
    for i in {4..7}
    do
      sed -i ''$i'{s/^/#/}' /etc/supervisord.conf
    done
fi

# Check if VAR is empty, and assign arch / if not empty, run with command and assign arch / if kill, and hasn't run (=0) then comment out
if [ -z "$AIRCAST_VAR" ]; then
  sed -i 's;command=/bin/aircast-linux-x86_64;command=/bin/aircast-'"$ARCH_VAR"';' /etc/supervisord.conf
elif [ "$AIRCAST_VAR" != "kill" ]; then
  sed -i 's;command=/bin/aircast-linux-x86_64;command=/bin/aircast-'"$ARCH_VAR $AIRCAST_VAR"';' /etc/supervisord.conf
elif [ "$AIRCAST_VAR" = "kill" ] && [ "$CAST" = 0 ]; then
    for i in {9..12}
    do
      sed -i ''$i'{s/^/#/}' /etc/supervisord.conf
    done
fi
